{"ast":null,"code":"import Communications from './communications-service';\nimport queryString from 'querystring';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport ApiService from './api-service';\nexport const SUPER_ADMIN = 'admin';\nexport const TEAM_MEMBER = 'team_member';\nexport const CLINIC_ADMIN = 'hospital_admin';\nexport const DOCTOR = 'doctor';\nexport const HOSPITAL_VIEW = 'hospital_view';\n\nconst parseQueryString = q => {\n  return queryString.parse(q.replace('?', ''));\n};\n\nconst getBytesInMB = bytes => {\n  return bytes / (1024 * 1024);\n};\n\nconst formatSizeUnits = function (bytes) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  const k = 1024;\n  const dm = decimals <= 0 ? 0 : decimals || 2;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\nconst getRandomID = length => {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n};\n\nconst showToast = function (msg) {\n  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"info\";\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  switch (type) {\n    case 'info':\n      toast.info(msg, options);\n      break;\n\n    case 'success':\n      toast.success(msg, options);\n      break;\n\n    case 'error':\n      toast.error(msg, options);\n      break;\n\n    case 'warning':\n      toast.warning(msg, options);\n      break;\n\n    default:\n      toast.dark(msg, options);\n      break;\n  }\n};\n\nconst handleErrors = (setErrors, err) => {\n  if (err.errors) {\n    const errors = {};\n\n    for (let field in err.errors) {\n      if (err.errors.hasOwnProperty(field)) {\n        errors[field] = err.errors[field][0];\n      }\n    }\n\n    setErrors(errors);\n  } else if (err.error) {\n    showToast(err.error, \"error\");\n  }\n};\n\nconst onConfirm = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const defaultConfig = {\n    confirmationText: 'Are you sure ?',\n    yes: {\n      text: 'Yes, Confirm',\n      color: 'default'\n    },\n    no: {\n      text: 'No, Cancel',\n      color: 'primary'\n    }\n  };\n  config = { ...defaultConfig,\n    ...config\n  };\n  return new Promise((resolve, reject) => {\n    Communications.ConfirmStateSubject.next({\n      config,\n      promise: {\n        resolve,\n        reject\n      }\n    });\n  });\n};\n\nconst openDialog = component => {\n  return new Promise((resolve, reject) => {\n    Communications.DialogStateSubject.next({\n      component,\n      promise: {\n        resolve,\n        reject\n      }\n    });\n  });\n};\n\nconst getCancelToken = () => {\n  return axios.CancelToken.source();\n};\n\nconst getFormDataFromJSON = json => {\n  const payload = new FormData();\n\n  for (const key in json) {\n    if (json.hasOwnProperty(key)) {\n      payload.append(key, json[key]);\n    }\n  }\n\n  return payload;\n};\n\nconst CommonService = {\n  parseQueryString,\n  handleErrors,\n  onConfirm,\n  openDialog,\n  showToast,\n  formatSizeUnits,\n  getRandomID,\n  getBytesInMB,\n  getCancelToken,\n  getFormDataFromJSON,\n  _api: ApiService,\n  _communications: Communications\n};\nexport default CommonService;","map":{"version":3,"sources":["/Users/divya/Documents/practice/react-alten-app/src/helpers/common-service.ts"],"names":["Communications","queryString","toast","axios","ApiService","SUPER_ADMIN","TEAM_MEMBER","CLINIC_ADMIN","DOCTOR","HOSPITAL_VIEW","parseQueryString","q","parse","replace","getBytesInMB","bytes","formatSizeUnits","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","getRandomID","length","text","possible","charAt","random","showToast","msg","type","options","info","success","error","warning","dark","handleErrors","setErrors","err","errors","field","hasOwnProperty","onConfirm","config","defaultConfig","confirmationText","yes","color","no","Promise","resolve","reject","ConfirmStateSubject","next","promise","openDialog","component","DialogStateSubject","getCancelToken","CancelToken","source","getFormDataFromJSON","json","payload","FormData","key","append","CommonService","_api","_communications"],"mappings":"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","sourcesContent":["import Communications from './communications-service';\r\nimport queryString from 'querystring';\r\nimport { FormikErrors } from 'formik';\r\nimport { toast, ToastOptions, TypeOptions } from 'react-toastify';\r\nimport { TsConfirmationConfig } from '../constants/CommonTypes';\r\nimport axios, { CancelTokenSource } from 'axios';\r\nimport ApiService from './api-service';\r\n\r\nexport const SUPER_ADMIN = 'admin';\r\nexport const TEAM_MEMBER = 'team_member';\r\nexport const CLINIC_ADMIN = 'hospital_admin';\r\nexport const DOCTOR = 'doctor';\r\nexport const HOSPITAL_VIEW = 'hospital_view';\r\nconst parseQueryString = (q: string): any => {\r\n    return queryString.parse(q.replace('?', ''));\r\n};\r\nconst getBytesInMB = (bytes: number) => {\r\n    return bytes / (1024 * 1024);\r\n};\r\nconst formatSizeUnits = (bytes: number, decimals = 2) => {\r\n    if (bytes === 0) {\r\n        return '0 Bytes';\r\n    }\r\n    const k = 1024;\r\n    const dm = decimals <= 0 ? 0 : decimals || 2;\r\n    const sizes = [ 'Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB' ];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n};\r\nconst getRandomID = (length: number) => {\r\n    let text = '';\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n};\r\nconst showToast = (msg: string, type: TypeOptions=\"info\" , options: ToastOptions = {}) => {\r\n    switch (type) {\r\n        case 'info':\r\n            toast.info(msg, options);\r\n            break;\r\n        case 'success':\r\n            toast.success(msg, options);\r\n            break;\r\n        case 'error':\r\n            toast.error(msg, options);\r\n            break;\r\n        case 'warning':\r\n            toast.warning(msg, options);\r\n            break;\r\n        default:\r\n            toast.dark(msg, options);\r\n            break;\r\n    }\r\n};\r\nconst handleErrors = (setErrors: (errors: FormikErrors<any>) => void, err: any) => {\r\n    if (err.errors) {\r\n        const errors: any = {};\r\n        for (let field in err.errors) {\r\n            if (err.errors.hasOwnProperty(field)) {\r\n                errors[field] = err.errors[field][0];\r\n            }\r\n        }\r\n        setErrors(errors);\r\n    } else if (err.error) {\r\n        showToast(err.error,\"error\");\r\n    }\r\n};\r\nconst onConfirm = (config: TsConfirmationConfig = {}) => {\r\n    const defaultConfig: TsConfirmationConfig = {\r\n        confirmationText: 'Are you sure ?',\r\n        yes: { text: 'Yes, Confirm', color: 'default' },\r\n        no: { text: 'No, Cancel', color: 'primary' }\r\n    };\r\n    config = { ...defaultConfig, ...config };\r\n    return new Promise((resolve, reject) => {\r\n        Communications.ConfirmStateSubject.next({ config, promise: { resolve, reject } });\r\n    });\r\n};\r\nconst openDialog = (component: any) => {\r\n    return new Promise((resolve, reject) => {\r\n        Communications.DialogStateSubject.next({ component, promise: { resolve, reject } });\r\n    });\r\n};\r\nconst getCancelToken = (): CancelTokenSource => {\r\n    return axios.CancelToken.source();\r\n};\r\nconst getFormDataFromJSON = (json: any): FormData => {\r\n    const payload = new FormData();\r\n    for (const key in json) {\r\n        if (json.hasOwnProperty(key)) {\r\n            payload.append(key, json[key]);\r\n        }\r\n    }\r\n    return payload;\r\n};\r\n\r\nconst CommonService = {\r\n    parseQueryString,\r\n    handleErrors,\r\n    onConfirm,\r\n    openDialog,\r\n    showToast,\r\n    formatSizeUnits,\r\n    getRandomID,\r\n    getBytesInMB,\r\n    getCancelToken,\r\n    getFormDataFromJSON,\r\n\r\n    _api: ApiService,\r\n    _communications: Communications\r\n};\r\nexport default CommonService;\r\n"]},"metadata":{},"sourceType":"module"}