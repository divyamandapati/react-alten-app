{"ast":null,"code":"var _jsxFileName = \"/Users/divya/Documents/practice/react-alten-app/src/components/core/FileDropZoneComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport { CloudUploadOutlined } from \"@material-ui/icons\";\nimport { Button } from \"@material-ui/core\";\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FileDropZoneComponent = props => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    OnFileSelected\n  } = props;\n  const defaultText = props.text || \"Drag File Here\";\n  const inputFile = useRef();\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const handleFileSelect = evt => {\n    evt.stopPropagation();\n    evt.preventDefault();\n    evt.dataTransfer.dropEffect = 'none';\n    setIsDragOver(false);\n    const files = evt.dataTransfer.files; // FileList object.\n\n    filesSelected(files);\n  };\n\n  const handleFileInputSelect = e => {\n    const files = e.target.files; // FileList object.\n\n    filesSelected(files);\n    e.target.value = null;\n  };\n\n  const filesSelected = files => {\n    files = Array.from(files);\n    OnFileSelected(files);\n  };\n\n  const handleDragLeave = e => {\n    setIsDragOver(false);\n    e.dataTransfer.dropEffect = 'none';\n  };\n\n  const handleDragOver = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    setIsDragOver(true);\n    e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ts-file-drop-zone\" + (isDragOver ? ' drag-enter-effect' : ''),\n      onDrop: handleFileSelect,\n      onDragOver: handleDragOver,\n      onDragLeave: handleDragLeave,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-upload-icon\",\n        children: /*#__PURE__*/_jsxDEV(CloudUploadOutlined, {\n          style: {\n            fontSize: 120\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), t(defaultText), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clearfix mrg-bottom-10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-line\",\n        children: \"or\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clearfix mrg-bottom-10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: 'upload-btn',\n        ref: instance => inputFile.current = instance,\n        type: \"file\",\n        onChange: handleFileInputSelect,\n        multiple: true,\n        className: \"display-none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: event => {\n          if (inputFile.current) inputFile.current.click();\n        },\n        color: \"secondary\",\n        className: \"browse-button\",\n        id: \"btn_browse_file\",\n        children: t('Browse')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(FileDropZoneComponent, \"UXNvvt2SyHqoWDhTtFB5ZDKq6uM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = FileDropZoneComponent;\nexport default FileDropZoneComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileDropZoneComponent\");","map":{"version":3,"sources":["/Users/divya/Documents/practice/react-alten-app/src/components/core/FileDropZoneComponent.tsx"],"names":["React","useRef","useState","CloudUploadOutlined","Button","useTranslation","FileDropZoneComponent","props","t","OnFileSelected","defaultText","text","inputFile","isDragOver","setIsDragOver","handleFileSelect","evt","stopPropagation","preventDefault","dataTransfer","dropEffect","files","filesSelected","handleFileInputSelect","e","target","value","Array","from","handleDragLeave","handleDragOver","fontSize","instance","current","event","click"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from 'react';\r\nimport {CloudUploadOutlined} from \"@material-ui/icons\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport interface FileDropZoneComponentProps {\r\n    OnFileSelected: (files: File[]) => void,\r\n    text?:string\r\n}\r\n\r\nconst FileDropZoneComponent = (props: FileDropZoneComponentProps) => {\r\n    const {t}=useTranslation()\r\n    const {OnFileSelected} = props;\r\n    const defaultText=props.text ||  \"Drag File Here\"\r\n    const inputFile = useRef<HTMLInputElement | null>();\r\n    const [isDragOver, setIsDragOver] = useState(false);\r\n\r\n    const handleFileSelect = (evt: any) => {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n        evt.dataTransfer.dropEffect = 'none';\r\n        setIsDragOver(false);\r\n        const files = evt.dataTransfer.files; // FileList object.\r\n        filesSelected(files);\r\n    }\r\n\r\n    const handleFileInputSelect = (e: any) => {\r\n        const files = e.target.files; // FileList object.\r\n        filesSelected(files);\r\n        e.target.value = null;\r\n    }\r\n\r\n    const filesSelected = (files: any[]) => {\r\n        files = Array.from(files);\r\n        OnFileSelected(files);\r\n    }\r\n\r\n    const handleDragLeave = (e: any) => {\r\n        setIsDragOver(false);\r\n        e.dataTransfer.dropEffect = 'none';\r\n    }\r\n\r\n    const handleDragOver = (e: any) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        setIsDragOver(true);\r\n        e.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={\"ts-file-drop-zone\" + (isDragOver ? ' drag-enter-effect' : '')}\r\n                 onDrop={handleFileSelect}\r\n                 onDragOver={handleDragOver} onDragLeave={handleDragLeave}>\r\n                <div className=\"file-upload-icon\"><CloudUploadOutlined style={{fontSize: 120}}/></div>\r\n                {t(defaultText)}\r\n                <div className=\"clearfix mrg-bottom-10\"/>\r\n                <div className=\"legend-line\">or</div>\r\n                <div className=\"clearfix mrg-bottom-10\"/>\r\n\r\n                <input id={'upload-btn'} ref={instance => inputFile.current = instance} type=\"file\"\r\n                       onChange={handleFileInputSelect} multiple className=\"display-none\"/>\r\n                <Button onClick={event => {\r\n                    if (inputFile.current) inputFile.current.click();\r\n                }} color=\"secondary\" className=\"browse-button\" id=\"btn_browse_file\">{t('Browse')}</Button>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default FileDropZoneComponent;\r\n"]},"metadata":{},"sourceType":"module"}