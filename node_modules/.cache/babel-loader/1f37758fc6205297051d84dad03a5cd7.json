{"ast":null,"code":"import { CommonService } from '../helpers';\nexport class Pagination {\n  constructor() {\n    this.totalItems = 0;\n    this.pageSize = 10;\n    this.pageIndex = 0;\n    this.pageSizeOptions = [10, 25, 50, 100];\n  }\n\n}\nexport class TsDataListOptions {\n  constructor(config, url, setState, _apiService) {\n    let method = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'post';\n\n    let _mobileQuery = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n    this.url = url;\n    this.setState = setState;\n    this._apiService = _apiService;\n    this.method = method;\n    this._isDataLoading = false;\n    this._isDataLoaded = false;\n    this.data = [];\n    this.matColumns = [];\n    this.webMatColumns = [];\n    this.mobileMatColumns = [];\n    this.extraPayload = {};\n    this.filter = {\n      search: ''\n    };\n    this.pagination = new Pagination();\n    this._mobileQuery = null;\n    this.actionButtons = [];\n\n    if (config) {\n      if (config.matColumns) {\n        this.matColumns = config.matColumns || [];\n        this.webMatColumns = config.matColumns || [];\n        this.mobileMatColumns = config.matColumns || [];\n      } else {\n        if (config.webMatColumns) {\n          this.webMatColumns = config.webMatColumns || [];\n          this.matColumns = config.webMatColumns || [];\n          this.mobileMatColumns = config.webMatColumns || [];\n        }\n\n        if (config.mobileMatColumns) {\n          this.mobileMatColumns = config.mobileMatColumns || [];\n        }\n      }\n\n      if (config.extraPayload) {\n        this.extraPayload = config.extraPayload;\n      }\n\n      if (config.actionButtons) {\n        this.actionButtons = config.actionButtons;\n      }\n\n      if (config.filter) {\n        this.filter = config.filter;\n      }\n\n      if (config.pagination) {\n        this.pagination = { ...this.pagination,\n          ...config.pagination\n        };\n      }\n\n      if (_mobileQuery) {\n        this._mobileQuery = _mobileQuery;\n      }\n    }\n  }\n\n}\nexport class TsDataListWrapperClass {\n  constructor(options) {\n    this._isDataLoading = false;\n    this._isDataLoaded = false;\n    this.data = [];\n    this.matColumns = [];\n    this.webMatColumns = [];\n    this.mobileMatColumns = [];\n    this.filter = {};\n    this.sort = {};\n    this.extraPayload = {};\n    this.pagination = new Pagination();\n    this._apiService = void 0;\n    this.url = '';\n    this.method = 'post';\n    this.actionButtons = [];\n    this._apiCall = void 0;\n    this.refreshToken = '';\n    this.setState = void 0;\n    this._isDataLoading = options._isDataLoading;\n    this._isDataLoaded = options._isDataLoaded;\n    this.data = options.data;\n    this.matColumns = options.matColumns;\n    this.webMatColumns = options.webMatColumns;\n    this.mobileMatColumns = options.mobileMatColumns;\n    this.filter = options.filter;\n    this.extraPayload = options.extraPayload;\n    this.pagination = options.pagination;\n    this._apiService = options._apiService;\n    this.url = options.url;\n    this.method = options.method;\n    this.actionButtons = options.actionButtons;\n    this.setState = options.setState;\n    this.getList();\n\n    if (options._mobileQuery) {\n      this.updateColumnShow(options._mobileQuery.matches);\n\n      options._mobileQuery.addEventListener('change', e => {\n        this.updateColumnShow(e.matches);\n      });\n    } else {\n      this.showWebList();\n    }\n  }\n\n  updateColumnShow(isMobile) {\n    if (isMobile) {\n      this.showMobileList();\n    } else {\n      this.showWebList();\n    }\n  }\n\n  showMobileList() {\n    this.matColumns = this.mobileMatColumns;\n  }\n\n  showWebList() {\n    this.matColumns = this.webMatColumns;\n  }\n\n  reload() {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pagination.pageIndex + 1;\n    this.getList(page);\n  }\n\n  canShowTable() {\n    return this._isDataLoaded && this.data && this.data.length > 0;\n  }\n\n  canShowNoData() {\n    return !this._isDataLoading && this._isDataLoaded && (!this.data || this.data.length === 0);\n  }\n\n  pageEvent() {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.pagination.pageSize;\n    // console.log(\"page\", page, limit);\n    this.getList(page + 1, limit);\n  }\n\n  getRandomID(length) {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    return text;\n  }\n\n  getList() {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.pagination.pageSize;\n    this._isDataLoading = true;\n    this.refreshToken = Math.random().toString();\n    this.setState({\n      table: this,\n      refreshToken: this.refreshToken\n    });\n    const payload = { ...this.filter,\n      ...this.extraPayload,\n      page,\n      limit,\n      sort: this.sort\n    };\n    const cancelTokenSource = CommonService.getCancelToken(); //let request = this._apiService.post(this.url, payload, {}, { cancelToken: cancelTokenSource.token });\n\n    let request = this._apiService.get(this.url, payload, {}, {\n      cancelToken: cancelTokenSource.token\n    });\n\n    if (this.method === 'get') {\n      request = this._apiService.get(this.url, payload, {}, {\n        cancelToken: cancelTokenSource.token\n      });\n    }\n\n    if (this._apiCall) {\n      this._apiCall.cancel();\n    }\n\n    this._apiCall = cancelTokenSource;\n    request.then(response => {\n      this._isDataLoading = false;\n      this._isDataLoaded = true;\n\n      if (response && response.success) {\n        this.data = response.data.docs || [];\n        this.pagination.totalItems = response.data.total || 0;\n        this.pagination.pageSize = response.data.limit || limit;\n        this.pagination.pageIndex = (response.data.page || page) - 1; // console.log(this.data);\n      } else {\n        this.data = [];\n        this.pagination.totalItems = 0;\n        this.pagination.pageSize = limit;\n        this.pagination.pageIndex = page - 1;\n      }\n\n      this.setState({\n        table: this,\n        refreshToken: this.refreshToken\n      });\n    }, err => {\n      this.data = [];\n      this._isDataLoaded = true;\n      this._isDataLoading = false;\n      this.data = [];\n      this.pagination.totalItems = 0;\n      this.pagination.pageSize = limit;\n      this.pagination.pageIndex = page - 1;\n      this.setState({\n        table: this,\n        refreshToken: this.refreshToken\n      });\n    });\n  }\n\n  sortList($event) {\n    this.sort = {};\n    this.sort[$event.active] = $event.direction;\n    this.getList(1);\n  }\n\n}","map":{"version":3,"sources":["/Users/divya/Documents/practice/react-alten-app/src/classes/ts-data-list-wrapper.class.ts"],"names":["CommonService","Pagination","totalItems","pageSize","pageIndex","pageSizeOptions","TsDataListOptions","constructor","config","url","setState","_apiService","method","_mobileQuery","_isDataLoading","_isDataLoaded","data","matColumns","webMatColumns","mobileMatColumns","extraPayload","filter","search","pagination","actionButtons","TsDataListWrapperClass","options","sort","_apiCall","refreshToken","getList","updateColumnShow","matches","addEventListener","e","showWebList","isMobile","showMobileList","reload","page","canShowTable","length","canShowNoData","pageEvent","limit","getRandomID","text","possible","i","charAt","Math","floor","random","toString","table","payload","cancelTokenSource","getCancelToken","request","get","cancelToken","token","cancel","then","response","success","docs","total","err","sortList","$event","active","direction"],"mappings":"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","sourcesContent":["import ApiService from '../helpers/api-service';\r\nimport { CommonService } from '../helpers';\r\nimport React from 'react';\r\n\r\nexport class Pagination {\r\n    totalItems = 0;\r\n    pageSize = 10;\r\n    pageIndex = 0;\r\n    pageSizeOptions = [ 10, 25, 50, 100 ];\r\n}\r\n\r\nexport interface TsDataListState {\r\n    table: TsDataListWrapperClass;\r\n    refreshToken?: string;\r\n}\r\n\r\nexport interface ActionItem {\r\n    icon: any;\r\n    text: string;\r\n    callback: any;\r\n    showInMobile: boolean;\r\n    color: string;\r\n}\r\n\r\nexport interface DataListConfig {\r\n    _isDataLoading?: boolean;\r\n    _isDataLoaded?: boolean;\r\n    data?: any[];\r\n    matColumns?: string[];\r\n    webMatColumns?: string[];\r\n    mobileMatColumns?: string[];\r\n    filter?: object;\r\n    sort?: object;\r\n    extraPayload?: object;\r\n    pagination?: Pagination;\r\n    actionButtons?: ActionItem[];\r\n}\r\n\r\nexport class TsDataListOptions {\r\n    _isDataLoading = false;\r\n    _isDataLoaded = false;\r\n    data = [];\r\n    matColumns: string[] = [];\r\n    webMatColumns: string[] = [];\r\n    mobileMatColumns: string[] = [];\r\n    extraPayload: any = {};\r\n    filter: any = { search: '' };\r\n    pagination = new Pagination();\r\n    _mobileQuery: MediaQueryList | null = null;\r\n    actionButtons: ActionItem[] = [];\r\n\r\n    constructor(\r\n        config: DataListConfig,\r\n        public url: string,\r\n        public setState: React.Dispatch<React.SetStateAction<TsDataListState | null>>,\r\n        public _apiService: typeof ApiService,\r\n        public method = 'post',\r\n        _mobileQuery: MediaQueryList | null = null\r\n    ) {\r\n        if (config) {\r\n            if (config.matColumns) {\r\n                this.matColumns = config.matColumns || [];\r\n                this.webMatColumns = config.matColumns || [];\r\n                this.mobileMatColumns = config.matColumns || [];\r\n            } else {\r\n                if (config.webMatColumns) {\r\n                    this.webMatColumns = config.webMatColumns || [];\r\n                    this.matColumns = config.webMatColumns || [];\r\n                    this.mobileMatColumns = config.webMatColumns || [];\r\n                }\r\n                if (config.mobileMatColumns) {\r\n                    this.mobileMatColumns = config.mobileMatColumns || [];\r\n                }\r\n            }\r\n            if (config.extraPayload) {\r\n                this.extraPayload = config.extraPayload;\r\n            }\r\n            if (config.actionButtons) {\r\n                this.actionButtons = config.actionButtons;\r\n            }\r\n            if (config.filter) {\r\n                this.filter = config.filter;\r\n            }\r\n            if (config.pagination) {\r\n                this.pagination = { ...this.pagination, ...config.pagination };\r\n            }\r\n            if (_mobileQuery) {\r\n                this._mobileQuery = _mobileQuery;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class TsDataListWrapperClass {\r\n    _isDataLoading = false;\r\n    _isDataLoaded = false;\r\n    data = [];\r\n    matColumns: string[] = [];\r\n    webMatColumns: string[] = [];\r\n    mobileMatColumns: string[] = [];\r\n    filter: any = {};\r\n    sort: any = {};\r\n    extraPayload: any = {};\r\n    pagination: Pagination = new Pagination();\r\n    _apiService: typeof ApiService;\r\n    url = '';\r\n    method = 'post';\r\n    actionButtons: ActionItem[] = [];\r\n    _apiCall: any;\r\n    refreshToken: string = '';\r\n    setState: React.Dispatch<React.SetStateAction<TsDataListState | null>>;\r\n\r\n    constructor(options: TsDataListOptions) {\r\n        this._isDataLoading = options._isDataLoading;\r\n        this._isDataLoaded = options._isDataLoaded;\r\n        this.data = options.data;\r\n        this.matColumns = options.matColumns;\r\n        this.webMatColumns = options.webMatColumns;\r\n        this.mobileMatColumns = options.mobileMatColumns;\r\n        this.filter = options.filter;\r\n        this.extraPayload = options.extraPayload;\r\n        this.pagination = options.pagination;\r\n        this._apiService = options._apiService;\r\n        this.url = options.url;\r\n        this.method = options.method;\r\n        this.actionButtons = options.actionButtons;\r\n        this.setState = options.setState;\r\n        this.getList();\r\n        if (options._mobileQuery) {\r\n            this.updateColumnShow(options._mobileQuery.matches);\r\n            options._mobileQuery.addEventListener('change', (e) => {\r\n                this.updateColumnShow(e.matches);\r\n            });\r\n        } else {\r\n            this.showWebList();\r\n        }\r\n    }\r\n\r\n    updateColumnShow(isMobile: boolean) {\r\n        if (isMobile) {\r\n            this.showMobileList();\r\n        } else {\r\n            this.showWebList();\r\n        }\r\n    }\r\n\r\n    showMobileList() {\r\n        this.matColumns = this.mobileMatColumns;\r\n    }\r\n\r\n    showWebList() {\r\n        this.matColumns = this.webMatColumns;\r\n    }\r\n\r\n    reload(page = this.pagination.pageIndex + 1) {\r\n        this.getList(page);\r\n    }\r\n\r\n    canShowTable() {\r\n        return this._isDataLoaded && this.data && this.data.length > 0;\r\n    }\r\n\r\n    canShowNoData() {\r\n        return !this._isDataLoading && this._isDataLoaded && (!this.data || this.data.length === 0);\r\n    }\r\n\r\n    pageEvent(page: number = 0, limit: number = this.pagination.pageSize) {\r\n        // console.log(\"page\", page, limit);\r\n        this.getList(page + 1, limit);\r\n    }\r\n\r\n    getRandomID(length: number) {\r\n        let text = '';\r\n        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n        }\r\n        return text;\r\n    }\r\n\r\n    getList(page = 1, limit = this.pagination.pageSize) {\r\n        this._isDataLoading = true;\r\n        this.refreshToken = Math.random().toString();\r\n        this.setState({ table: this, refreshToken: this.refreshToken });\r\n        const payload = { ...this.filter, ...this.extraPayload, page, limit, sort: this.sort };\r\n        const cancelTokenSource = CommonService.getCancelToken();\r\n        //let request = this._apiService.post(this.url, payload, {}, { cancelToken: cancelTokenSource.token });\r\n        let request = this._apiService.get(this.url, payload, {}, { cancelToken: cancelTokenSource.token });\r\n        if (this.method === 'get') {\r\n            request = this._apiService.get(this.url, payload, {}, { cancelToken: cancelTokenSource.token });\r\n        }\r\n        if (this._apiCall) {\r\n            this._apiCall.cancel();\r\n        }\r\n        this._apiCall = cancelTokenSource;\r\n        request.then(\r\n            (response) => {\r\n              \r\n                this._isDataLoading = false;\r\n                this._isDataLoaded = true;\r\n                if (response && response.success) {\r\n                    this.data = response.data.docs || [];\r\n                    this.pagination.totalItems = response.data.total || 0;\r\n                    this.pagination.pageSize = response.data.limit || limit;\r\n                    this.pagination.pageIndex = (response.data.page || page) - 1;\r\n                    // console.log(this.data);\r\n                } else {\r\n                    this.data = [];\r\n                    this.pagination.totalItems = 0;\r\n                    this.pagination.pageSize = limit;\r\n                    this.pagination.pageIndex = page - 1;\r\n                }\r\n                this.setState({ table: this, refreshToken: this.refreshToken });\r\n            },\r\n            (err) => {\r\n                this.data = [];\r\n                this._isDataLoaded = true;\r\n                this._isDataLoading = false;\r\n                this.data = [];\r\n                this.pagination.totalItems = 0;\r\n                this.pagination.pageSize = limit;\r\n                this.pagination.pageIndex = page - 1;\r\n                this.setState({ table: this, refreshToken: this.refreshToken });\r\n            }\r\n        );\r\n    }\r\n\r\n    sortList($event: any) {\r\n        this.sort = {};\r\n        this.sort[$event.active] = $event.direction;\r\n        this.getList(1);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}