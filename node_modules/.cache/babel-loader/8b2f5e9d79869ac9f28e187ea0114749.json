{"ast":null,"code":"import axios from 'axios';\nimport Communications from './communications-service';\nimport { ENV } from '../constants';\nexport const defaultHeaders = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json'\n};\nexport const defaultOptions = {}; // axios.defaults.headers.common['Accept-Languages'] = localStorage.getItem('lang') || 'en';\n\nlet jwtToken = '';\nCommunications.updateLoginUserTokenSubject.subscribe(token => {\n  jwtToken = token;\n});\n\nconst getHeaders = headers => {\n  const Authorization = {\n    Authorization: 'Bearer ' + jwtToken\n  };\n  headers = { ...defaultHeaders,\n    ...Authorization,\n    ...headers\n  };\n  return headers;\n};\n\nconst getPayload = function (payload) {\n  let isFormData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (isFormData) {\n    // payload.append('active_user_id', activeUserId);\n    return payload;\n  } else {\n    return { ...payload\n    };\n  }\n};\n\nconst ApiService = {\n  post: function (url) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let progressCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : progress => {};\n    const axiosOptions = {\n      headers: getHeaders(headers),\n      ...options,\n      onUploadProgress: uploadProgressHandler.bind(null, progressCallback)\n    };\n    payload = getPayload(payload);\n    let request = axios.post(url, payload, axiosOptions);\n    return getRequestPromise(request);\n  },\n  put: function (url) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let progressCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : progress => {};\n    const axiosOptions = {\n      headers: getHeaders(headers),\n      ...options,\n      onUploadProgress: uploadProgressHandler.bind(null, progressCallback)\n    };\n    payload = getPayload(payload);\n    let request = axios.put(url, payload, axiosOptions);\n    return getRequestPromise(request);\n  },\n  upload: function (url) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new FormData();\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let progressCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : progress => {};\n    const axiosOptions = {\n      headers: getHeaders({ ...headers\n      }),\n      ...options,\n      onUploadProgress: uploadProgressHandler.bind(null, progressCallback)\n    };\n    payload = getPayload(payload, true);\n    let request = axios.post(url, payload, axiosOptions);\n    return getRequestPromise(request);\n  },\n  get: function (url) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const axiosOptions = {\n      headers: getHeaders(headers),\n      params: getPayload(payload),\n      ...options\n    };\n    let request = axios.get(url, axiosOptions);\n    return getRequestPromise(request);\n  },\n  delete: function (url) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    // options = getParsedOptions(headers, options);\n    const axiosOptions = {\n      headers: getHeaders(headers),\n      data: getPayload(payload),\n      ...options\n    };\n    let request = axios.delete(url, axiosOptions);\n    return getRequestPromise(request);\n  }\n};\n\nconst uploadProgressHandler = (progressCallback, progressEvent) => {\n  if (progressCallback) {\n    const percentFraction = progressEvent.loaded / progressEvent.total;\n    const percent = Math.floor(percentFraction * 100);\n    progressCallback(percent);\n  }\n};\n\nconst getRequestPromise = request => {\n  return new Promise((resolve, reject) => {\n    request.then(resp => {\n      if (ENV.ENV_MODE === 'development') {// console.log('====>>>>>>', resp.data);\n      }\n\n      resolve({ ...resp.data,\n        status: resp.status\n      });\n    }).catch(err => {\n      if (ENV.ENV_MODE === 'development') {//   console.error('=====>', err, 'API Error');\n      }\n\n      try {\n        const response = err.response ? err.response : {\n          data: null\n        };\n        let error = response.data ? { ...response.data\n        } : {\n          status: 500\n        };\n        error.status = response.status ? parseInt(response.status) : 500;\n\n        if (error.status === 401) {\n          Communications.logoutSubject.next();\n        }\n\n        if (error.status === 403) {\n          Communications.ReloadStateSubject.next();\n        }\n\n        reject(error);\n      } catch (e) {// console.error('=====>', e, 'Api Function Catch');\n      }\n    });\n  });\n};\n\nexport default ApiService;","map":{"version":3,"sources":["/Users/divya/Documents/practice/react-alten-app/src/helpers/api-service.ts"],"names":["axios","Communications","ENV","defaultHeaders","Accept","defaultOptions","jwtToken","updateLoginUserTokenSubject","subscribe","token","getHeaders","headers","Authorization","getPayload","payload","isFormData","ApiService","post","url","options","progressCallback","progress","axiosOptions","onUploadProgress","uploadProgressHandler","bind","request","getRequestPromise","put","upload","FormData","get","params","delete","data","progressEvent","percentFraction","loaded","total","percent","Math","floor","Promise","resolve","reject","then","resp","ENV_MODE","status","catch","err","response","error","parseInt","logoutSubject","next","ReloadStateSubject","e"],"mappings":"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","sourcesContent":["import axios, {\r\n    AxiosAdapter,\r\n    AxiosBasicCredentials,\r\n    AxiosProxyConfig,\r\n    AxiosRequestConfig,\r\n    AxiosResponse,\r\n    AxiosTransformer,\r\n    CancelToken,\r\n    ResponseType\r\n} from 'axios';\r\nimport Communications from './communications-service';\r\nimport { ENV } from '../constants';\r\n\r\nexport const defaultHeaders = {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n};\r\nexport const defaultOptions = {};\r\n\r\n// axios.defaults.headers.common['Accept-Languages'] = localStorage.getItem('lang') || 'en';\r\n\r\nlet jwtToken: string | undefined = '';\r\n\r\nCommunications.updateLoginUserTokenSubject.subscribe((token) => {\r\n    jwtToken = token;\r\n});\r\n\r\nconst getHeaders = (headers: any) => {\r\n    const Authorization = { Authorization: 'Bearer ' + jwtToken };\r\n    headers = {\r\n        ...defaultHeaders,\r\n        ...Authorization,\r\n        ...headers\r\n    };\r\n    return headers;\r\n};\r\n\r\nconst getPayload = (payload: any | FormData, isFormData = false) => {\r\n    if (isFormData) {\r\n        // payload.append('active_user_id', activeUserId);\r\n        return payload;\r\n    } else {\r\n        return { ...payload };\r\n    }\r\n};\r\n\r\nexport interface TSAPIResponseType {\r\n    success: boolean;\r\n    data: any | { docs: any[]; total: number; pages: number; limit: number; page: number };\r\n    msg?: string;\r\n    error?: string;\r\n    errors?: any[];\r\n}\r\n\r\nexport interface AxiosOptions {\r\n    transformRequest?: AxiosTransformer | AxiosTransformer[];\r\n    transformResponse?: AxiosTransformer | AxiosTransformer[];\r\n    paramsSerializer?: (params: any) => string;\r\n    timeout?: number;\r\n    timeoutErrorMessage?: string;\r\n    withCredentials?: boolean;\r\n    adapter?: AxiosAdapter;\r\n    auth?: AxiosBasicCredentials;\r\n    responseType?: ResponseType;\r\n    xsrfCookieName?: string;\r\n    xsrfHeaderName?: string;\r\n    maxContentLength?: number;\r\n    validateStatus?: ((status: number) => boolean) | null;\r\n    maxBodyLength?: number;\r\n    maxRedirects?: number;\r\n    socketPath?: string | null;\r\n    httpAgent?: any;\r\n    httpsAgent?: any;\r\n    proxy?: AxiosProxyConfig | false;\r\n    cancelToken?: CancelToken;\r\n    decompress?: boolean;\r\n}\r\n\r\nconst ApiService = {\r\n    post: (\r\n        url: string,\r\n        payload = {},\r\n        headers = {},\r\n        options: AxiosOptions = {},\r\n        progressCallback: (progress: number) => void = (progress) => {}\r\n    ): Promise<TSAPIResponseType> => {\r\n        const axiosOptions: AxiosRequestConfig = {\r\n            headers: getHeaders(headers),\r\n            ...options,\r\n            onUploadProgress: uploadProgressHandler.bind(null, progressCallback)\r\n        };\r\n        payload = getPayload(payload);\r\n        let request = axios.post(url, payload, axiosOptions);\r\n        return getRequestPromise(request);\r\n    },\r\n    put: (\r\n        url: string,\r\n        payload = {},\r\n        headers = {},\r\n        options: AxiosOptions = {},\r\n        progressCallback: (progress: number) => void = (progress) => {}\r\n    ): Promise<TSAPIResponseType> => {\r\n        const axiosOptions: AxiosRequestConfig = {\r\n            headers: getHeaders(headers),\r\n            ...options,\r\n            onUploadProgress: uploadProgressHandler.bind(null, progressCallback)\r\n        };\r\n        payload = getPayload(payload);\r\n        let request = axios.put(url, payload, axiosOptions);\r\n        return getRequestPromise(request);\r\n    },\r\n    upload: (\r\n        url: string,\r\n        payload = new FormData(),\r\n        headers = {},\r\n        options: AxiosOptions = {},\r\n        progressCallback: (progress: number) => void = (progress) => {}\r\n    ): Promise<TSAPIResponseType> => {\r\n        const axiosOptions: AxiosRequestConfig = {\r\n            headers: getHeaders({ ...headers }),\r\n            ...options,\r\n            onUploadProgress: uploadProgressHandler.bind(null, progressCallback)\r\n        };\r\n        payload = getPayload(payload, true);\r\n        let request = axios.post(url, payload, axiosOptions);\r\n        return getRequestPromise(request);\r\n    },\r\n    get: (url: string, payload = {}, headers = {}, options: AxiosOptions = {}): Promise<TSAPIResponseType> => {\r\n        const axiosOptions: AxiosRequestConfig = {\r\n            headers: getHeaders(headers),\r\n            params: getPayload(payload),\r\n            ...options\r\n        };\r\n        let request = axios.get(url, axiosOptions);\r\n        return getRequestPromise(request);\r\n    },\r\n    delete: (url: string, payload = {}, headers = {}, options: AxiosOptions = {}): Promise<TSAPIResponseType> => {\r\n        // options = getParsedOptions(headers, options);\r\n        const axiosOptions: AxiosRequestConfig = {\r\n            headers: getHeaders(headers),\r\n            data: getPayload(payload),\r\n            ...options\r\n        };\r\n        let request = axios.delete(url, axiosOptions);\r\n        return getRequestPromise(request);\r\n    }\r\n};\r\n\r\nconst uploadProgressHandler = (progressCallback: (progress: number) => void, progressEvent: any) => {\r\n    if (progressCallback) {\r\n        const percentFraction = progressEvent.loaded / progressEvent.total;\r\n        const percent = Math.floor(percentFraction * 100);\r\n        progressCallback(percent);\r\n    }\r\n};\r\nconst getRequestPromise = (request: Promise<AxiosResponse>) => {\r\n    return new Promise<any>((resolve, reject) => {\r\n        request\r\n            .then((resp) => {\r\n                if (ENV.ENV_MODE === 'development') {\r\n                    // console.log('====>>>>>>', resp.data);\r\n                }\r\n                resolve({ ...resp.data, status: resp.status });\r\n            })\r\n            .catch((err: any) => {\r\n                if (ENV.ENV_MODE === 'development') {\r\n                    //   console.error('=====>', err, 'API Error');\r\n                }\r\n                try {\r\n                    const response: any = err.response ? err.response : { data: null };\r\n                    let error: any = response.data ? { ...response.data } : { status: 500 };\r\n                    error.status = response.status ? parseInt(response.status) : 500;\r\n                    if (error.status === 401) {\r\n                        Communications.logoutSubject.next();\r\n                    }\r\n                    if (error.status === 403) {\r\n                        Communications.ReloadStateSubject.next();\r\n                    }\r\n                    reject(error);\r\n                } catch (e) {\r\n                    // console.error('=====>', e, 'Api Function Catch');\r\n                }\r\n            });\r\n    });\r\n};\r\n\r\nexport default ApiService;\r\n"]},"metadata":{},"sourceType":"module"}