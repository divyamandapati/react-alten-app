{"ast":null,"code":"import { call, put, takeEvery } from 'redux-saga/effects';\nimport { LOGIN_CHECK, LOGIN_USER, LOGOUT_USER, updateLoginUser } from '../actions/auth.action';\nimport { ApiService, Communications } from '../../helpers';\nimport { ENV } from '../../constants'; // LOGIN_USER\n\nfunction* loginUser(action) {// console.log('login user ', action);\n} // LOGOUT_USER\n\n\nfunction* logoutUser(action) {// console.log('logout user ',action);\n} // LOGOUT_USER\n\n\nconst fetchCheckLogin = () => {\n  return ApiService.get(ENV.API_URL + 'checkLogin');\n};\n\nfunction* loginCheck() {\n  try {\n    // @ts-ignore\n    const resp = yield call(fetchCheckLogin);\n    yield put(updateLoginUser(resp.data));\n  } catch (error) {\n    Communications.logoutSubject.next();\n  }\n} // use them in parallel\n\n\nexport default function* authSaga() {\n  yield takeEvery(LOGIN_USER, loginUser);\n  yield takeEvery(LOGIN_CHECK, loginCheck);\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}","map":{"version":3,"sources":["/Users/divya/Documents/practice/react-alten-app/src/store/sagas/auth.saga.ts"],"names":["call","put","takeEvery","LOGIN_CHECK","LOGIN_USER","LOGOUT_USER","updateLoginUser","ApiService","Communications","ENV","loginUser","action","logoutUser","fetchCheckLogin","get","API_URL","loginCheck","resp","data","error","logoutSubject","next","authSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,WAAlC,EAA+CC,eAA/C,QAAsE,wBAAtE;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,eAA3C;AACA,SAASC,GAAT,QAAoB,iBAApB,C,CAEA;;AACA,UAAUC,SAAV,CAAoBC,MAApB,EAAiC,CAC7B;AACH,C,CAED;;;AACA,UAAUC,UAAV,CAAqBD,MAArB,EAAkC,CAC9B;AACH,C,CAED;;;AACA,MAAME,eAAe,GAAG,MAAM;AAC1B,SAAON,UAAU,CAACO,GAAX,CAAeL,GAAG,CAACM,OAAJ,GAAc,YAA7B,CAAP;AACH,CAFD;;AAIA,UAAUC,UAAV,GAAuB;AACnB,MAAI;AACA;AACA,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACa,eAAD,CAAvB;AACA,UAAMZ,GAAG,CAACK,eAAe,CAACW,IAAI,CAACC,IAAN,CAAhB,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZX,IAAAA,cAAc,CAACY,aAAf,CAA6BC,IAA7B;AACH;AACJ,C,CAED;;;AACA,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMpB,SAAS,CAACE,UAAD,EAAaM,SAAb,CAAf;AACA,QAAMR,SAAS,CAACC,WAAD,EAAca,UAAd,CAAf;AACA,QAAMd,SAAS,CAACG,WAAD,EAAcO,UAAd,CAAf;AACH","sourcesContent":["import { call, put, takeEvery } from 'redux-saga/effects';\r\nimport { LOGIN_CHECK, LOGIN_USER, LOGOUT_USER, updateLoginUser } from '../actions/auth.action';\r\nimport { ApiService, Communications } from '../../helpers';\r\nimport { ENV } from '../../constants';\r\n\r\n// LOGIN_USER\r\nfunction* loginUser(action: any) {\r\n    // console.log('login user ', action);\r\n}\r\n\r\n// LOGOUT_USER\r\nfunction* logoutUser(action: any) {\r\n    // console.log('logout user ',action);\r\n}\r\n\r\n// LOGOUT_USER\r\nconst fetchCheckLogin = () => {\r\n    return ApiService.get(ENV.API_URL + 'checkLogin');\r\n};\r\n\r\nfunction* loginCheck() {\r\n    try {\r\n        // @ts-ignore\r\n        const resp = yield call(fetchCheckLogin);\r\n        yield put(updateLoginUser(resp.data));\r\n    } catch (error) {\r\n        Communications.logoutSubject.next();\r\n    }\r\n}\r\n\r\n// use them in parallel\r\nexport default function* authSaga() {\r\n    yield takeEvery(LOGIN_USER, loginUser);\r\n    yield takeEvery(LOGIN_CHECK, loginCheck);\r\n    yield takeEvery(LOGOUT_USER, logoutUser);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}