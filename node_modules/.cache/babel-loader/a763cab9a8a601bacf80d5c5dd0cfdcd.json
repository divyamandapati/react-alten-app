{"ast":null,"code":"var _jsxFileName = \"/Users/divya/Documents/practice/react-alten-app/src/navigation/navigator.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { BrowserRouter, Redirect, Route, Switch, useHistory } from 'react-router-dom';\nimport NotFoundComponent from '../components/NotFoundComponent';\nimport AppLayout from '../app/layout/app-layout';\nimport AuthLayout from '../app/layout/auth-layout';\nimport LoginScreen from '../app/auth/login/LoginScreen';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CommonService from '../helpers/common-service';\nimport { Communications } from '../helpers';\nimport { logoutUser } from '../store/actions/auth.action';\nimport UsersListScreen from '../app/users/list/UsersListScreen'; // @ts-ignore\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthLayoutRoute = _ref => {\n  _s();\n\n  let {\n    component: Component,\n    ...rest\n  } = _ref;\n  let doneUrl = '/users/list';\n  const {\n    token\n  } = useSelector(state => state.auth); // const {user} = useSelector((state: StateParams) => state.auth);\n\n  if (!!token) {\n    const query = CommonService.parseQueryString(rest.location.search); // console.log('AuthLayoutRoute', query);\n\n    if (query.hasOwnProperty('done')) {\n      doneUrl = query.done;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: doneUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: matchProps => /*#__PURE__*/_jsxDEV(AuthLayout, {\n      children: /*#__PURE__*/_jsxDEV(Component, { ...matchProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}; // @ts-ignore\n\n\n_s(AuthLayoutRoute, \"HuWIDNSVXALprLH3avUitvg3hr4=\", false, function () {\n  return [useSelector];\n});\n\n_c = AuthLayoutRoute;\n\nconst AppLayoutRoute = _ref2 => {\n  _s2();\n\n  let {\n    component: Component,\n    ...rest\n  } = _ref2;\n  // const query = new URLSearchParams(rest.location.search);\n  // console.log(rest, 'AppLayoutRoute');\n  // console.log(query);\n  const {\n    token\n  } = useSelector(state => state.auth);\n\n  if (!!token) {\n    return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: matchProps => /*#__PURE__*/_jsxDEV(AppLayout, {\n        children: /*#__PURE__*/_jsxDEV(Component, { ...matchProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: '/login?done=' + encodeURIComponent(rest.location.pathname)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(AppLayoutRoute, \"HuWIDNSVXALprLH3avUitvg3hr4=\", false, function () {\n  return [useSelector];\n});\n\n_c2 = AppLayoutRoute;\n\nconst MainRouter = () => {\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Navigator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = MainRouter;\n\nconst Navigator = props => {\n  _s3();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const reloadSubjectSub = Communications.ReloadStateSubject.subscribe(() => {\n      history.push('/users/list');\n    });\n    const logoutSubject = Communications.logoutSubject.subscribe(() => {\n      //         dispatch(setTempRole(undefined));\n      // dispatch(setTempId(''));\n      dispatch(logoutUser());\n      history.push('/login');\n    });\n    return () => {\n      reloadSubjectSub.unsubscribe();\n      logoutSubject.unsubscribe();\n    };\n  }, [dispatch, history]);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: '/users/list'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AuthLayoutRoute, {\n      path: \"/login\",\n      component: LoginScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AppLayoutRoute, {\n      path: \"/users/list\",\n      component: UsersListScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/not-found\",\n      children: /*#__PURE__*/_jsxDEV(NotFoundComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: '/not-found'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(Navigator, \"7u3xwS4PqIKuFyHlFGn/5M55K3I=\", false, function () {\n  return [useHistory, useDispatch];\n});\n\n_c4 = Navigator;\nexport default MainRouter;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"AuthLayoutRoute\");\n$RefreshReg$(_c2, \"AppLayoutRoute\");\n$RefreshReg$(_c3, \"MainRouter\");\n$RefreshReg$(_c4, \"Navigator\");","map":{"version":3,"sources":["/Users/divya/Documents/practice/react-alten-app/src/navigation/navigator.tsx"],"names":["React","useEffect","BrowserRouter","Redirect","Route","Switch","useHistory","NotFoundComponent","AppLayout","AuthLayout","LoginScreen","useDispatch","useSelector","CommonService","Communications","logoutUser","UsersListScreen","AuthLayoutRoute","component","Component","rest","doneUrl","token","state","auth","query","parseQueryString","location","search","hasOwnProperty","done","matchProps","AppLayoutRoute","encodeURIComponent","pathname","MainRouter","Navigator","props","history","dispatch","reloadSubjectSub","ReloadStateSubject","subscribe","push","logoutSubject","unsubscribe"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { BrowserRouter, Redirect, Route, Switch, useHistory } from 'react-router-dom';\r\nimport NotFoundComponent from '../components/NotFoundComponent';\r\nimport AppLayout from '../app/layout/app-layout';\r\nimport AuthLayout from '../app/layout/auth-layout';\r\nimport LoginScreen from '../app/auth/login/LoginScreen';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { StateParams } from '../store/reducers';\r\nimport CommonService from '../helpers/common-service';\r\nimport { Communications } from '../helpers';\r\nimport { logoutUser } from '../store/actions/auth.action';\r\nimport UsersListScreen from '../app/users/list/UsersListScreen';\r\n// @ts-ignore\r\nconst AuthLayoutRoute = ({ component: Component, ...rest }) => {\r\n    let doneUrl = '/users/list';\r\n    const { token } = useSelector((state: StateParams) => state.auth);\r\n    // const {user} = useSelector((state: StateParams) => state.auth);\r\n    if (!!token) {\r\n        const query = CommonService.parseQueryString(rest.location.search);\r\n        // console.log('AuthLayoutRoute', query);\r\n        if (query.hasOwnProperty('done')) {\r\n            doneUrl = query.done;\r\n        }\r\n        return <Redirect to={doneUrl} />;\r\n    }\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(matchProps) => (\r\n                <AuthLayout>\r\n                    <Component {...matchProps} />\r\n                </AuthLayout>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\n// @ts-ignore\r\nconst AppLayoutRoute = ({ component: Component, ...rest }) => {\r\n    // const query = new URLSearchParams(rest.location.search);\r\n    // console.log(rest, 'AppLayoutRoute');\r\n    // console.log(query);\r\n    const { token } = useSelector((state: StateParams) => state.auth);\r\n    if (!!token) {\r\n        return (\r\n            <Route\r\n                {...rest}\r\n                render={(matchProps) => (\r\n                    <AppLayout>\r\n                        <Component {...matchProps} />\r\n                    </AppLayout>\r\n                )}\r\n            />\r\n        );\r\n    }\r\n    return <Redirect to={'/login?done=' + encodeURIComponent(rest.location.pathname)} />;\r\n};\r\n\r\nconst MainRouter = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Navigator />\r\n        </BrowserRouter>\r\n    );\r\n};\r\nconst Navigator = (props: any) => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    useEffect(\r\n        () => {\r\n            const reloadSubjectSub = Communications.ReloadStateSubject.subscribe(() => {\r\n                history.push('/users/list');\r\n            });\r\n            const logoutSubject = Communications.logoutSubject.subscribe(() => {\r\n                //         dispatch(setTempRole(undefined));\r\n                // dispatch(setTempId(''));\r\n                dispatch(logoutUser());\r\n                history.push('/login');\r\n            });\r\n            return () => {\r\n                reloadSubjectSub.unsubscribe();\r\n                logoutSubject.unsubscribe();\r\n            };\r\n        },\r\n        [dispatch, history]\r\n    );\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\">\r\n                <Redirect to={'/users/list'} />\r\n            </Route>\r\n\r\n            <AuthLayoutRoute path=\"/login\" component={LoginScreen} />\r\n            <AppLayoutRoute path=\"/users/list\" component={UsersListScreen} />\r\n            <Route path=\"/not-found\">\r\n                <NotFoundComponent />\r\n            </Route>\r\n            <Route path=\"*\">\r\n                <Redirect to={'/not-found'} />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default MainRouter;\r\n"]},"metadata":{},"sourceType":"module"}